package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.symboltable.SymbolTable;
import lyc.compiler.polacaInversa.PolacaInversa;

import java.util.ArrayList;
class Parser;

action code {:

public ArrayList<String> variables = new ArrayList<String>();
public void insertar(String nombre, String tipo, String valor, boolean esConstante){
    SymbolTable tabla = SymbolTable.getSymbolTable();

    int longitud = 0;
    if (valor != null){
        longitud = valor.length();
    }
    tabla.add(nombre,tipo,valor,longitud, esConstante);
 }

 public void insertarEnPolaca(String elemento){
 	PolacaInversa.getPolacaInversa().insertar(elemento);
 }

:};

// Terminals

/* ------------------------ PALABRAS RESERVADAS BLOQUES ------------- */

terminal SI;
terminal SINO;
terminal MIENTRAS;
terminal INIT;

/* ------------ PALABRAS RESERVADAS TIPOS DE DATOS ------------------- */

terminal INT;
terminal FLOAT;
terminal STRING;

/* ----------- PALABRAS RESERVADAS ENTRADA / SALIDA ---------------- */

terminal LEER;
terminal ESCRIBIR;

/* ----------- PALABRAS RESERVADAS TEMAS ESPECIALES ---------------- */

terminal TRIANGULO;
terminal BINARY_COUNT;


/* ----------------------- OPERADORES ARITMETICOS -----------------------*/

terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;


/* ------------------------ OPERADORES LOGICOS -------------------------- */

terminal EQUAL;
terminal NOT_EQUAL;
terminal GREATER_THAN;
terminal GREATER_THAN_EQUAL;
terminal LESS_THAN;
terminal LESS_THAN_EQUAL;
terminal AND;
terminal OR;
terminal NOT;


/* ------------------------ TOKEN DE BLOQUES Y AGRUPAMIENTO ------------- */

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COMMA;
terminal DOT;
terminal COLON;


/* -------------------------  IDENTIFICADOR ------------------------- */

terminal IDENTIFIER;

/* ------------------------- CONSTANTES ------------------------- */
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;



// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

// --------------- Aca ponemos nuestros NO terminales ------------------
non terminal program;
non terminal block;
non terminal bloque_inicializacion;
non terminal inicializacion;
non terminal lista_identificadores;
non terminal tipo_dato;
non terminal lista;
non terminal elementos_lista;


// -- sentencias del lenguaje
non terminal sentencia_inicializacion;
non terminal sentencia_si;
non terminal sentencia_si_sino;
non terminal sentencia_mientras;
non terminal sentencia_leer;
non terminal sentencia_escribir;
non terminal sentencia_binarycount;
non terminal sentencia_triangulo;


// --- condicionales y comparadores
non terminal condition_group;
non terminal condition;
non terminal op_logico;


// Start Symbol Definition
start with program;

program ::= block {:
  System.out.println("Parser: program -> block");
  System.out.println("--------------- COMPILACION EXITOSA ------------------\n\n");
:};

block ::= block sentence;
block ::= sentence;

//Sentencia de asignacion
sentence ::= assignment {:
	System.out.println("Parser: sentence -> assignment");
:};
assignment ::= IDENTIFIER:id ASSIG expression {:
	System.out.println("Parser: assignment -> IDENTIFIER (" + id + ")  ASSIG expression");
	insertarEnPolaca(id.toString());
	insertarEnPolaca(":=");
:};
assignment ::= IDENTIFIER:id ASSIG sentencia_binarycount {:
	System.out.println("Parser: assignment -> IDENTIFIER (" + id + ")  ASSIG sentencia_binarycount");
:};
assignment ::= IDENTIFIER:id ASSIG sentencia_triangulo {:
	System.out.println("Parser: assignment -> IDENTIFIER (" + id + ")  ASSIG sentencia_triangulo");
:};
assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:constant {:
	System.out.println("Parser: assignment -> IDENTIFIER (" + id + ")  ASSIG STRING_CONSTANT (" + constant + ")");
	//se eliminan los "" de la cte antes de almacenar en la tabla.
	String s = constant.toString();
	s = s.substring(1,s.length()-1);
	insertar(s, "STRING", s, true);


	insertarEnPolaca(constant.toString());
	insertarEnPolaca(id.toString());
	insertarEnPolaca(":=");
:};
expression ::= expression PLUS term {:
	System.out.println("Parser: expression -> expression PLUS term");
	insertarEnPolaca("+");
:};
expression ::= expression SUB term {:
	System.out.println("Parser: expression -> expression SUB term");
	insertarEnPolaca("-");
:};

//En este no hace falta agregar nada para la notación intermedia
expression ::= term {:
	System.out.println("Parser: expression -> term");
:};
term ::= term MULT factor {:
	System.out.println("Parser: term -> term MULT factor");
	insertarEnPolaca("*");
:};
term ::= term DIV factor {:
	System.out.println("Parser: term -> term DIV factor");
	insertarEnPolaca("/");
:};

//En este no hace falta agregar nada para la notación intermedia
term ::= factor {:
	System.out.println("Parser: term -> factor");
:};
factor ::= IDENTIFIER:id  {:
	System.out.println("Parser: factor -> IDENTIFIER (" + id + ")");
	insertarEnPolaca(id.toString());
:};
factor ::= INTEGER_CONSTANT:constant {:
	System.out.println("Parser: factor -> INTEGER_CONSTANT (" + constant + ")");
	insertar(constant.toString(), "INT", constant.toString(), true);
	insertarEnPolaca(constant.toString());
:};
factor ::= FLOAT_CONSTANT:constant {:
	System.out.println("Parser: factor -> FLOAT_CONSTANT (" + constant + ")");
	insertar(constant.toString(), "FLOAT", constant.toString(), true);
	insertarEnPolaca(constant.toString());
:};

//En este no hace falta agregar nada para la notación intermedia
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {:
	System.out.println("Parser: factor -> OPEN_BRACKET expression CLOSE_BRACKET");
:};


//Sentencia de inicializacion
sentence ::= inicializacion {:
	System.out.println("Parser: sentence -> inicializacion\n\n");
:};
inicializacion ::= INIT OPEN_CURLY_BRACKET bloque_inicializacion CLOSE_CURLY_BRACKET {:
	System.out.println("Parser: inicializacion -> INIT OPEN_CURLY_BRACKET bloque_inicializacion CLOSE_CURLY_BRACKET");
:};
bloque_inicializacion ::= bloque_inicializacion sentencia_inicializacion {:
	System.out.println("Parser: bloque_inicializacion -> bloque_inicializacion sentencia_inicializacion");
:};
bloque_inicializacion ::= sentencia_inicializacion {:
	System.out.println("Parser: bloque_inicializacion -> sentencia_inicializacion");
:};
sentencia_inicializacion ::= lista_identificadores  COLON tipo_dato {:
	System.out.println("Parser: sentencia_inicializacion -> lista_identificadores  COLON tipo_dato");
:};
lista_identificadores ::= lista_identificadores COMMA IDENTIFIER:id {:
	System.out.println("Parser: lista_identificadores -> lista_identificadores COMMA IDENTIFIER (" + id + ")");
	variables.add(id.toString());
:};
lista_identificadores ::=  IDENTIFIER:id {:
	System.out.println("Parser: lista_identificadores -> IDENTIFIER (" + id + ")");
	variables.add(id.toString());
:};
tipo_dato ::= INT {:
	System.out.println("Parser: tipo_dato -> Int");
	for (String id : variables) {
            insertar(id.toString(), "INT", null, false);
        }
	variables.clear();
:};
tipo_dato ::= FLOAT {:
	System.out.println("Parser: tipo_dato -> Float");
	for (String id : variables) {
            insertar(id.toString(), "FLOAT", null, false);
        }
	variables.clear();
:};
tipo_dato ::= STRING {:
	System.out.println("Parser: tipo_dato -> String");
	for (String id : variables) {
            insertar(id.toString(), "STRING", null, false);
        }
	variables.clear();
:};

// sentencia leer
sentence ::= sentencia_leer {:
	System.out.println("Parser: sentence ::= sentencia_leer");
:};

sentencia_leer ::= LEER OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {:
	System.out.println("Parser: sentencia_leer ::= LEER OPEN_BRACKET IDENTIFIER (" + id + ") CLOSE_BRACKET");
:};

sentencia_leer ::= LEER OPEN_BRACKET INTEGER_CONSTANT:cte CLOSE_BRACKET {:
	System.out.println("Parser: sentencia_leer ::= LEER OPEN_BRACKET INTEGER_CONSTANT (" + cte + ") CLOSE_BRACKET");
:};

sentencia_leer ::= LEER OPEN_BRACKET FLOAT_CONSTANT:cte CLOSE_BRACKET {:
	System.out.println("Parser: sentencia_leer ::= LEER OPEN_BRACKET FLOAT_CONSTANT (" + cte + ") CLOSE_BRACKET");
:};

sentencia_leer ::= LEER OPEN_BRACKET STRING_CONSTANT:cte CLOSE_BRACKET {:
	System.out.println("Parser: sentencia_leer ::= LEER OPEN_BRACKET STRING_CONSTANT (" + cte + ") CLOSE_BRACKET");
:};

// sentencia escribir
sentence ::= sentencia_escribir {:
	System.out.println("Parser: sentence ::= sentencia_escribir");
:};

sentencia_escribir ::= ESCRIBIR OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {:
	System.out.println("Parser: sentencia_escribir ::= ESCRIBIR OPEN_BRACKET IDENTIFIER (" + id + ") CLOSE_BRACKET");
:};

sentencia_escribir ::= ESCRIBIR OPEN_BRACKET INTEGER_CONSTANT:cte CLOSE_BRACKET {:
	System.out.println("Parser: sentencia_escribir ::= ESCRIBIR OPEN_BRACKET INTEGER_CONSTANT (" + cte + ") CLOSE_BRACKET");
:};

sentencia_escribir ::= ESCRIBIR OPEN_BRACKET FLOAT_CONSTANT:cte CLOSE_BRACKET {:
	System.out.println("Parser: ssentencia_escribir ::= ESCRIBIR OPEN_BRACKET FLOAT_CONSTANT (" + cte + ") CLOSE_BRACKET");
:};

sentencia_escribir ::= ESCRIBIR OPEN_BRACKET STRING_CONSTANT:cte CLOSE_BRACKET {:
	System.out.println("Parser: sentencia_escribir ::= ESCRIBIR OPEN_BRACKET STRING_CONSTANT (" + cte + ") CLOSE_BRACKET");
:};

// sentencia while
sentence ::= sentencia_mientras {:
	System.out.println("Parser: sentence ::= sentencia_while\n\n");
:};

sentencia_mientras ::= MIENTRAS OPEN_BRACKET condition_group CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {:
	System.out.println("Parser: sentence -> MIENTRAS OPEN_BRACKET condition_group CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET");
:};

// sentencia if 
sentence ::= sentencia_si{:
	System.out.println("Parser: sentence -> sentencia_si\n\n");
:};

sentencia_si ::= SI OPEN_BRACKET condition_group CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {:
	System.out.println("Parser: sentencia_si -> SI OPEN_BRACKET condition_group CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET");
:};


// sentencia if else
sentence ::= sentencia_si_sino{:
	System.out.println("Parser: sentence -> sentencia_si_sino\n\n");
:};

sentencia_si_sino ::= SI OPEN_BRACKET condition_group CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET SINO OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {:
	System.out.println("Parser: sentencia_si_sino -> SI OPEN_BRACKET condition_group CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET SINO OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET");
:};

//se crea un grupo de condiciones para abarcar todas los tipos de condicionales, ya sea de una condicion sola, una condicion sola pero negada o condiciones dobles
condition_group ::= condition {:
	System.out.println("Parser: condition_group -> condition");
:};

condition_group ::= NOT condition {:
	System.out.println("Parser: condition_group -> NOT condition");
:};

condition_group ::= condition AND condition {:
	System.out.println("Parser: condition_group -> condition AND condition");
:};

condition_group ::= condition OR condition {:
	System.out.println("Parser: condition_group -> condition OR condition");
:};

condition ::= expression op_logico expression {:
	System.out.println("Parser: condition -> expression op_logico expression");
:};

condition ::= NOT expression {:
	System.out.println("Parser: condition -> NOT expression");
:};

op_logico ::= GREATER_THAN {:
	System.out.println("Parser: op_logico ->  GREATER_THAN");
:};

op_logico ::= GREATER_THAN_EQUAL {:
	System.out.println("Parser: op_logico ->  GREATER_THAN_EQUAL");
:};

op_logico ::= LESS_THAN {:
	System.out.println("Parser: op_logico ->  LESS_THAN");
:};

op_logico ::= LESS_THAN_EQUAL {:
	System.out.println("Parser: op_logico ->  LESS_THAN_EQUAL");
:};

op_logico ::= EQUAL {:
	System.out.println("Parser: op_logico ->  EQUAL");
:};

op_logico ::= NOT_EQUAL {:
	System.out.println("Parser: op_logico ->  NOT_EQUAL");
:};

//sentencia binaryCount
sentencia_binarycount ::= BINARY_COUNT OPEN_BRACKET lista CLOSE_BRACKET  {:
	System.out.println("Parser: sentencia_binarycount -> BINARY_COUNT OPEN_BRACKET lista CLOSE_BRACKET");
:};
lista ::= OPEN_SQUARE_BRACKET elementos_lista CLOSE_SQUARE_BRACKET  {:
	System.out.println("Parser: sentencia_binarycount -> OPEN_SQUARE_BRACKET elementos_lista CLOSE_SQUARE_BRACKET");
:};
elementos_lista ::= elementos_lista COMMA factor {:
	System.out.println("Parser: sentencia_binarycount -> elementos_lista COMMA factor");
:};
elementos_lista ::= factor {:
	System.out.println("Parser: sentencia_binarycount -> factor");
:};

//sentencia triangulo
sentencia_triangulo ::= TRIANGULO OPEN_BRACKET expression COMMA expression COMMA expression CLOSE_BRACKET {:
	System.out.println("Parser: sentencia_triangulo -> TRIANGULO OPEN_BRACKET factor COMMA factor COMMA factor CLOSE_BRACKET");
:};