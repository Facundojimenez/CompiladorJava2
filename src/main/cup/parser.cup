package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.symboltable.SymbolTable;

class Parser;

action code {:
public void insertar(String nombre, String tipo,String valor){
    SymbolTable tabla = SymbolTable.getSymbolTable();
    int longitud = 0;
    if (valor != null){
        longitud = valor.length();
    }
    tabla.add(nombre,tipo,valor,longitud);
   }

:};

// Terminals

/* ------------------------ PALABRAS RESERVADAS BLOQUES ------------- */

terminal SI;
terminal SINO;
terminal MIENTRAS;
terminal INIT;

/* ------------ PALABRAS RESERVADAS TIPOS DE DATOS ------------------- */

terminal INT;
terminal FLOAT;
terminal STRING;

/* ----------- PALABRAS RESERVADAS ENTRADA / SALIDA ---------------- */

terminal LEER;
terminal ESCRIBIR;


/* ----------------------- OPERADORES ARITMETICOS -----------------------*/

terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;


/* ------------------------ OPERADORES LOGICOS -------------------------- */

terminal EQUAL;
terminal NOT_EQUAL;
terminal GREATER_THAN;
terminal GREATER_THAN_EQUAL;
terminal LESS_THAN;
terminal LESS_THAN_EQUAL;
terminal AND;
terminal OR;
terminal NOT;


/* ------------------------ TOKEN DE BLOQUES Y AGRUPAMIENTO ------------- */

terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal COMMA;
terminal DOT;
terminal COLON;


/* -------------------------  IDENTIFICADOR ------------------------- */

terminal IDENTIFIER;

/* ------------------------- CONSTANTES ------------------------- */
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;



// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

// Start Symbol Definition
start with sentence;

sentence ::= assignment {: System.out.println("End"); :};
assignment ::= IDENTIFIER:id ASSIG expression {: insertar(id.toString(),null,id.toString()); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: insertar(id.toString(),null,id.toString()); :};
factor ::= INTEGER_CONSTANT:constant {: insertar(constant.toString(),null,null); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
